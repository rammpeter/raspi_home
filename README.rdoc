== Pool: Steuerung der Umwälzpumpe für Solaranlage mit Raspberry-Pi

=== Anforderungen für Steuerung der Umwälzpumpe / Stückliste
* Raspberry Pi (37,92 €)
* Gehäuse für Raspberyy Pi (6,29 €)
* Micro-SD-Karte 16 GB  ( 6,68 €)
* Micro-USB-Netzteil 2A (14,99 €)
* Widerstand 4,7 kOhm ( Pfennige)
* 4 * Temperatursensor DS18B20 wasserdicht mit Kabel  (5 Stück 16,99 €)
* Pfostenstecker 40-polig mit Flachbandkabel ( 4,00 €)
* per IP-Netz (Ethernet oder WLAN) schaltbare Steckdose (aktuell unterstützt: Rutenbeck TPIP1, Edimax SP-1101W )

=== Schritte zur Inbetriebnahme der Steuerung

==== Einrichtung des Raspberry Pi
* Download des Raspbian OS von https://www.raspberrypi.org/downloads/raspbian/ und Kopie auf Micro-SD-Karte
* Einrichten WLAN mit wicd-curses im Text-Modus per ssh, wenn kein GUI verfügbar
* Einstellen WLAN-Standort Deutschland per: > sudo raspi-config, Internat. options, change WiFi country
* Aktivieren 1wire: > sudo raspi-config, Advanced options, 1-Wire
* Erweitern der .profile des Users pi um folgende zwei Zeilen
    alias ll="ls -l"
    alias cdrr="cd ~/Documents/Projekte/rammpeter.github/raspi_home"


=== Installieren der Ruby-Umgebung
* Curl + Revision control systeme instaliieren: > sudo apt-get install -y git curl zlib1g-dev subversion
* Schlüssel für rvm-Installation laden: sudo gpg2 --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
* rvm instalieren: > curl -sSL https://get.rvm.io | bash -s -- --ignore-dotfiles
* Wenn Fehlermeldung, dann angelistetes Kommando ausführen analog: > sudo gpg2 --keyserver hkp://keys.gnupg.net --recv-keys xxxxxxx und wiederholen: > curl -sSL https://get.rvm.io | sudo bash -s stable
* Danach neu anmelden als pi
* Ruby installieren lokal für pi: > rvm install ruby
* Ruby als Default zur Verwendung markieren: rvm --default use ruby
* Bundler gem installieren: > gem install bundler
* Erweitern der .profile des Users pi um folgende zwei Zeilen
    export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
    [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*



==== Einrichtung der Pool-Steuerung
* Einrichten eines Verzeichnisses auf dem Raspberry Pi: > mkdir -p /home/pi/Documents/Projekte/rammpeter.github
* Wechsel in das Verzeichnis: > cd /home/pi/Documents/Projekte/rammpeter.github
* Klonen des Projektes von GitHub: > git clone https://github.com/rammpeter/raspi_home
* Wechsel in Projekt-Verzeichnis: > cd raspi_home
* Init-Script kopieren und verlinken:
    > sudo cp raspi_home.initscript /etc/init.d/raspi_home
    > sudo ln -s /etc/init.d/raspi_home /etc/rc2.d/S01raspi_home
    > sudo ln -s /etc/init.d/raspi_home /etc/rc3.d/S01raspi_home
    > sudo ln -s /etc/init.d/raspi_home /etc/rc4.d/S01raspi_home
    > sudo ln -s /etc/init.d/raspi_home /etc/rc5.d/S01raspi_home
* Systemd neu initialisieren: > sudo systemctl daemon-reload
* Ausführen des Install/Update-Jobs: > ./upgrade_system.sh
* Anpassen der Crontab des Users pi: > crontab -e + Einfügen der beiden Zeilen
    * * * * *  /home/pi/Documents/Projekte/rammpeter.github/raspi_home/schreibe_temperatur.sh
    0 12 * * *  /home/pi/Documents/Projekte/rammpeter.github/raspi_home/housekeeping.sh

=== Anschliessen der Temperatur-Sensoren
* Verkabelung an GPIO-Anschlüssen analog http://projects.privateeyepi.com/home/temperature-sensor-project-using-ds18b20
* Sensoren sollten dann als Verzeichnis unter /sys/bus/w1/devices/ auftauchen
* Temperatur steht in Datei w1_slave im Verzeichnis des Sensors


